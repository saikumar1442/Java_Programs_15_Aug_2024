
SQL COMMANDS
===============

DDL : Data Defination Language,   EX : CREATE, ALTER, DROP, TRUNCATE, RENAME
DML : Data Manipulation Language  EX : INSERT, UPDATE, DELETE
DCL : Data Control Language       EX : GRANT, REVOKE
TCL : Trancation Control Language EX : COMMIT, ROLLBACK, SAVEPOINT 
Constraints : EX : PRIMARY KEY, FOREIGN KEY, CHECK, UNIQUE, DEFAULT, NOT NULL, INDEX

DDL Commands :

CREATE : This DDL command allows us to create the new table, function, stored procedure and other database objects.

CREATE TABLE Employee(
emp_id INT PRIMARY KEY,
emp_name VARCHAR(100),
emp_joining_date DATE,
emp_joining_time TIME,
emp_joinig_year INT,
emp_salary DECIMAL(10, 2)
);

ALTER : This DDL command allows us to modify the structure of database object.

	ALTER TABLE Employee ADD emp_address varchar(200);

DROP : This DDL command allows us to remove the table defination and data from the SQL system.

	The following SQL query deletes the Employee table using the DROP DDL Command.

	DROP TABLE Employee;

TRUNCATE : This DDL command allows the database users to remove all the existing records from the table.

	When we use TRUNCATE command, it will delete all the rows from a table.(It will not delete the columns and Table)

	TRUNCATE TABLE Employee;

RENAME : This DDL command allows the user to change the Name of the existing table.

	RENAME TABLE Employee To Department; (RENAME TABLE old_table_name TO new_table_name)
	

DML : It is responsible for performing all types of data Modification in a database.
======
INSERT : This command is used to insert data into the row of a table.

	INSERT INTO Department(Dept_Id, Dept_Name, Dept_Sal) VALUES (1,"Pavan", 20000);
	
UPDATE : This command is used to update or modify the value of a column in the table.

	UPDATE Department SET Dept_Name= 'Hanuman', Dept_Sal='25000' WHERE Dept_Id = 1;
	
	
SELECT : This command helps us to select the attribute based on the condition described by the WHERE Clause.

	SELECT Dept_Name, Dept_Sal FROM Department WHERE Dept_Id > 15;
	
	
SQL JOINS :    SQL joins are used to combine rows from two or more tables based on a related column between them
============

INNER JOIN : Returns records that have matching values in both tables.

	SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate 
	FROM Orders INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;
	
LEFT JOIN (or LEFT OUTER JOIN) : Returns all records from the left table, and the matched records from the right table. If there is no match, the result is NULL from the right side.

	SELECT Customers.CustomerName, Orders.OrderID
	FROM Customers LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID;
	
RIGHT JOIN (or RIGHT OUTER JOIN) : Returns all records from the right table, and the matched records from the left table. If there is no match, the result is NULL from the left side.

	SELECT Orders.OrderID, Employees.EmployeeName
	FROM Orders RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID;

FULL JOIN (or FULL OUTER JOIN) : Returns all records when there is a match in either left or right table. If there is no match, the result is NULL from the side that does not have a match.
	
	SELECT Customers.CustomerName, Orders.OrderID
	FROM Customers FULL JOIN Orders ON Customers.CustomerID = Orders.CustomerID;
	
CROSS JOIN : Returns the Cartesian product of the two tables, i.e., all possible combinations of rows.

	SELECT Customers.CustomerName, Products.ProductName
	FROM Customers CROSS JOIN Products;

SQL CONSTRAINTS :
==================
PRIMARY KEY : It doesn't allow duplicates and null values.

	CREATE TABLE Students (
		StudentID INT PRIMARY KEY,
		StudentName VARCHAR(50) NOT NULL
	);

FOREIGN KEY : It will work based on the primary key and it will take the reference of primary key.

	CREATE TABLE Orders (
		OrderID INT PRIMARY KEY,
		CustomerID INT,
		FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
	);
 
NOT NULL : Ensures that a column cannot have a NULL value.

	CREATE TABLE Students (
		StudentID INT NOT NULL,
		StudentName VARCHAR(50) NOT NULL
	);

UNIQUE : Ensures that all values in a column are unique.

	CREATE TABLE Students (
		StudentID INT NOT NULL UNIQUE,
		Email VARCHAR(100) UNIQUE
	);
	
CHECK : Ensures that the values in a column satisfy a specific condition.

	CREATE TABLE Products (
		ProductID INT PRIMARY KEY,
		Price DECIMAL(10, 2),
		CHECK (Price >= 0)
	);
	
DEFAULT : Sets a default value for a column if no value is specified.

	CREATE TABLE Employees (
		EmployeeID INT PRIMARY KEY,
		StartDate DATE DEFAULT GETDATE()
	);
	
	
	
	
SQL Queries and Interview Questions :
======================================

1. To find the Second Highest Salary in the Employee Table

select MAX(Salary) As SecondHighestSalary From Employee Where Salary NOT IN (Select MAX(Salary) From Employee) OR
select MAX(Salary) As SecondHighestSalary From Employee Where Salary < (Select MAX(Salary) From Employee)

2. by using SQL, to find the duplicate name in the employee table:

SELECT Names,COUNT(*) AS Occurrence FROM Users1 GROUP BY Names HAVING COUNT(*)>1;  

3. top 4 highest salary in sql ? 

SELECT max(Salary) FROM Employee WHERE Salary NOT IN (
													  SELECT TOP 3 Salary
													  FROM Employee
													  ORDER BY Salary DESC
													  );
													  
4. How to find the maximun salary in department ID in List of employees by using streams ?

SELECT DEPTID, MAX(SALARY) FROM EMPLOYEEDETAILS GROUP BY DEPTID;			

5. How to find the maximum salary in a Employee table.

SELECT MAX(salary) AS highest_salary FROM EMPLOYEE


6. how to create the employee table with columns as id, name, joining date and joining time using SQL ?

CREATE TABLE employee (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    joining_date DATE,
    joining_time TIME
);


7. Can we create 2 primary keys in one Employee table using sql?

In SQL, a table can have only one primary key. However, a primary key can consist of multiple columns, known as a composite primary key. This ensures that the combination of values in these columns is unique for each row.

Hereâ€™s an example of how you can create a table with a composite primary key:

CREATE TABLE employee (
    id INT,
    name VARCHAR(100),
    joining_date DATE,
    joining_time TIME,
    PRIMARY KEY (id, joining_date)
);

8. what is the difference between primary key and unique key in SQL

Great question! Both primary keys and unique keys are used to enforce uniqueness in a table, but they have some key differences:

Primary Key
	Uniqueness: Ensures that each value in the primary key column(s) is unique.
	Null Values: Cannot contain NULL values.
	Single per Table: Each table can have only one primary key.
	Indexing: Automatically creates a clustered index on the primary key column(s).
Unique Key
	Uniqueness: Ensures that each value in the unique key column(s) is unique.
	Null Values: Can contain one NULL value per column.
	Multiple per Table: A table can have multiple unique keys.
	Indexing: Automatically creates a non-clustered index on the unique key column(s).

CREATE TABLE employee (
    id INT PRIMARY KEY, -- Primary Key
    email VARCHAR(100) UNIQUE, -- Unique Key
    name VARCHAR(100),
    joining_date DATE,
    joining_time TIME
);

9. what is an Index in SQL ?

An index in SQL is a database object that improves the speed of data retrieval operations on a table. Think of it like an index in a book, which helps you quickly find the information you need without having to read through the entire book.

Key Points about Indexes:

Purpose: Indexes are used to speed up the retrieval of rows by using a pointer. They can significantly improve the performance of SELECT queries.
Types:
Clustered Index: Sorts and stores the data rows of the table based on the key values. Each table can have only one clustered index.
Non-Clustered Index: Contains a sorted list of key values and pointers to the data rows. A table can have multiple non-clustered indexes.
Creation: You can create an index on one or more columns of a table.


Example:

1. Creating a Non-Clustered Index

CREATE INDEX idx_employee_name ON employee(name);

2. Creating a Clustered Index

CREATE CLUSTERED INDEX idx_employee_id ON employee(id);

Benefits:
	Faster Query Performance : Indexes can make data retrieval much faster.
	Efficient Sorting : They help in sorting data efficiently.
Drawbacks:
	Storage Space : Indexes require additional storage space.
	Maintenance Overhead : They can slow down data modification operations (INSERT, UPDATE, DELETE) because the index needs to be updated.
